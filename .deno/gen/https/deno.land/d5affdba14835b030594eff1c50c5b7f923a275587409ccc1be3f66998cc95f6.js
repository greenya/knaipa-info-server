import { serve, serveTLS } from "./vendor/https/deno.land/std/http/server.ts";
import { join } from "./vendor/https/deno.land/std/path/mod.ts";
import { yellow } from "./vendor/https/deno.land/std/fmt/colors.ts";
import { Context } from "./context.ts";
import { Router } from "./router.ts";
import { Group } from "./group.ts";
import { createHttpExceptionBody, HttpException, InternalServerErrorException, } from "./http_exception.ts";
export function NotImplemented() {
    return new Error("Not Implemented");
}
export class Application {
    constructor() {
        this.router = new Router();
        this.middleware = [];
        this.premiddleware = [];
        this.#groups = [];
        this.#start = async (s) => {
            this.server = s;
            for await (const req of this.server) {
                const c = new Context({
                    r: req,
                    app: this,
                });
                let h;
                for (const i of this.#groups) {
                    i.θapplyMiddleware();
                }
                if (this.premiddleware.length === 0) {
                    h = this.router.find(req.method, c);
                    h = this.#applyMiddleware(h, ...this.middleware);
                }
                else {
                    h = (c) => {
                        h = this.router.find(req.method, c);
                        h = this.#applyMiddleware(h, ...this.middleware);
                        return h(c);
                    };
                    h = this.#applyMiddleware(h, ...this.premiddleware);
                }
                this.#transformResult(c, h).then(() => {
                    req.respond(c.response).catch(() => { });
                });
            }
        };
        this.#applyMiddleware = (h, ...m) => {
            for (let i = m.length - 1; i >= 0; --i) {
                h = m[i](h);
            }
            return h;
        };
        this.#transformResult = async (c, h) => {
            let result;
            try {
                result = await h(c);
            }
            catch (e) {
                if (e instanceof HttpException) {
                    result = c.json(typeof e.response === "object"
                        ? e.response
                        : createHttpExceptionBody(e.response, undefined, e.status), e.status);
                }
                else {
                    console.log(e);
                    e = new InternalServerErrorException(e.message);
                    result = c.json(e.response, e.status);
                }
            }
            if (c.response.status == undefined) {
                switch (typeof result) {
                    case "object":
                        if (result instanceof Uint8Array) {
                            c.blob(result);
                        }
                        else {
                            c.json(result);
                        }
                        break;
                    case "string":
                        /^\s*</.test(result) ? c.html(result) : c.string(result);
                        break;
                    default:
                        c.string(String(result));
                }
            }
        };
    }
    #process;
    #groups;
    get θprocess() {
        console.warn(yellow("`Application#θprocess` is UNSTABLE!"));
        return this.#process;
    }
    #start;
    #applyMiddleware;
    start(sc) {
        this.#process = this.#start(serve(sc));
    }
    startTLS(sc) {
        this.#process = this.#start(serveTLS(sc));
    }
    async close() {
        if (this.server) {
            this.server.close();
        }
        await this.#process;
    }
    pre(...m) {
        this.premiddleware.push(...m);
        return this;
    }
    use(...m) {
        this.middleware.push(...m);
        return this;
    }
    connect(path, h, ...m) {
        return this.add("CONNECT", path, h, ...m);
    }
    delete(path, h, ...m) {
        return this.add("DELETE", path, h, ...m);
    }
    get(path, h, ...m) {
        return this.add("GET", path, h, ...m);
    }
    head(path, h, ...m) {
        return this.add("HEAD", path, h, ...m);
    }
    options(path, h, ...m) {
        return this.add("OPTIONS", path, h, ...m);
    }
    patch(path, h, ...m) {
        return this.add("PATCH", path, h, ...m);
    }
    post(path, h, ...m) {
        return this.add("POST", path, h, ...m);
    }
    put(path, h, ...m) {
        return this.add("PUT", path, h, ...m);
    }
    trace(path, h, ...m) {
        return this.add("TRACE", path, h, ...m);
    }
    any(path, h, ...m) {
        const methods = [
            "CONNECT",
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
            "TRACE",
        ];
        for (const method of methods) {
            this.add(method, path, h, ...m);
        }
        return this;
    }
    match(methods, path, h, ...m) {
        for (const method of methods) {
            this.add(method, path, h, ...m);
        }
        return this;
    }
    add(method, path, handler, ...middleware) {
        this.router.add(method, path, (c) => {
            let h = handler;
            for (const m of middleware) {
                h = m(h);
            }
            return h(c);
        });
        return this;
    }
    group(prefix, ...m) {
        const g = new Group({ app: this, prefix });
        this.#groups.push(g);
        g.use(...m);
        return g;
    }
    static(prefix, root, ...m) {
        if (prefix[prefix.length - 1] === "/") {
            prefix = prefix.slice(0, prefix.length - 1);
        }
        const h = (c) => {
            const filepath = c.path.substr(prefix.length);
            return c.file(join(root, filepath));
        };
        return this.get(`${prefix}/*`, h, ...m);
    }
    file(path, filepath, ...m) {
        return this.get(path, (c) => c.file(filepath), ...m);
    }
    #transformResult;
}
//# sourceMappingURL=data:application/json;base64,