import { join } from "./vendor/https/deno.land/std/path/mod.ts";
export class Group {
    prefix;
    middleware;
    app;
    #willBeAdded;
    constructor(opts) {
        this.prefix = opts.prefix || "";
        this.app = opts.app || {};
        this.middleware = [];
        this.#willBeAdded = [];
    }
    use(...m) {
        this.middleware.push(...m);
        return this;
    }
    connect(path, h, ...m) {
        this.#willBeAdded.push(["CONNECT", path, h, m]);
        return this;
    }
    delete(path, h, ...m) {
        this.#willBeAdded.push(["DELETE", path, h, m]);
        return this;
    }
    get(path, h, ...m) {
        this.#willBeAdded.push(["GET", path, h, m]);
        return this;
    }
    head(path, h, ...m) {
        this.#willBeAdded.push(["HEAD", path, h, m]);
        return this;
    }
    options(path, h, ...m) {
        this.#willBeAdded.push(["OPTIONS", path, h, m]);
        return this;
    }
    patch(path, h, ...m) {
        this.#willBeAdded.push(["PATCH", path, h, m]);
        return this;
    }
    post(path, h, ...m) {
        this.#willBeAdded.push(["POST", path, h, m]);
        return this;
    }
    put(path, h, ...m) {
        this.#willBeAdded.push(["PUT", path, h, m]);
        return this;
    }
    trace(path, h, ...m) {
        this.#willBeAdded.push(["TRACE", path, h, m]);
        return this;
    }
    any(path, h, ...m) {
        const methods = [
            "CONNECT",
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
            "TRACE",
        ];
        for (const method of methods) {
            this.#willBeAdded.push([method, path, h, m]);
        }
        return this;
    }
    match(methods, path, h, ...m) {
        for (const method of methods) {
            this.#willBeAdded.push([method, path, h, m]);
        }
        return this;
    }
    add(method, path, handler, ...middleware) {
        this.#willBeAdded.push([method, path, handler, middleware]);
        return this;
    }
    static(prefix, root) {
        this.app.static(join(this.prefix, prefix), root);
        return this;
    }
    file(p, filepath, ...m) {
        this.app.file(join(this.prefix, p), filepath, ...m);
        return this;
    }
    group(prefix, ...m) {
        const g = this.app.group(this.prefix + prefix, ...this.middleware, ...m);
        return g;
    }
    Î¸applyMiddleware() {
        for (const [method, path, handler, middleware] of this.#willBeAdded) {
            this.app.add(method, this.prefix + path, handler, ...this.middleware, ...middleware);
        }
        this.#willBeAdded = [];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFFaEUsTUFBTSxPQUFPLEtBQUs7SUFDaEIsTUFBTSxDQUFTO0lBQ2YsVUFBVSxDQUFtQjtJQUM3QixHQUFHLENBQWM7SUFFakIsWUFBWSxDQUVWO0lBRUYsWUFBWSxJQUEwQztRQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSyxFQUFrQixDQUFDO1FBRTNDLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBRyxDQUFtQjtRQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFZLEVBQUUsQ0FBYyxFQUFFLEdBQUcsQ0FBbUI7UUFDMUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELE1BQU0sQ0FBQyxJQUFZLEVBQUUsQ0FBYyxFQUFFLEdBQUcsQ0FBbUI7UUFDekQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELEdBQUcsQ0FBQyxJQUFZLEVBQUUsQ0FBYyxFQUFFLEdBQUcsQ0FBbUI7UUFDdEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELElBQUksQ0FBQyxJQUFZLEVBQUUsQ0FBYyxFQUFFLEdBQUcsQ0FBbUI7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELE9BQU8sQ0FBQyxJQUFZLEVBQUUsQ0FBYyxFQUFFLEdBQUcsQ0FBbUI7UUFDMUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELEtBQUssQ0FBQyxJQUFZLEVBQUUsQ0FBYyxFQUFFLEdBQUcsQ0FBbUI7UUFDeEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELElBQUksQ0FBQyxJQUFZLEVBQUUsQ0FBYyxFQUFFLEdBQUcsQ0FBbUI7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELEdBQUcsQ0FBQyxJQUFZLEVBQUUsQ0FBYyxFQUFFLEdBQUcsQ0FBbUI7UUFDdEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENB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