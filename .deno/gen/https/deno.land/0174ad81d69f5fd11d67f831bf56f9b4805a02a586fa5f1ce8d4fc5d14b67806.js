import { Status } from "./vendor/https/deno.land/std/http/http_status.ts";
import { join } from "./vendor/https/deno.land/std/path/mod.ts";
import { getCookies, setCookie, } from "./vendor/https/deno.land/std/http/cookie.ts";
import { MultipartReader } from "./vendor/https/deno.land/std/mime/multipart.ts";
import { Header, MIME } from "./constants.ts";
import { contentType, NotFoundHandler } from "./util.ts";
const { cwd, readFile, readAll } = Deno;
const encoder = new TextEncoder();
const decoder = new TextDecoder();
export class Context {
    app;
    request;
    url;
    response = { headers: new Headers() };
    params = {};
    customContext;
    #store;
    #body;
    get cookies() {
        return getCookies(this.request);
    }
    get path() {
        return this.url.pathname;
    }
    get method() {
        return this.request.method;
    }
    get queryParams() {
        const params = {};
        for (const [k, v] of this.url.searchParams) {
            params[k] = v;
        }
        return params;
    }
    get body() {
        return this.#body ?? (this.#body = this.#readBody());
    }
    get(key) {
        return this.#store?.get(key);
    }
    set(key, val) {
        if (this.#store === undefined) {
            this.#store = new Map();
        }
        this.#store.set(key, val);
    }
    constructor(optionsOrContext) {
        if (optionsOrContext instanceof Context) {
            Object.assign(this, optionsOrContext);
            this.customContext = this;
            return;
        }
        const opts = optionsOrContext;
        this.app = opts.app;
        this.request = opts.r;
        this.url = new URL(this.request.url, `http://0.0.0.0`);
    }
    #writeContentType = (v) => {
        if (!this.response.headers.has(Header.ContentType)) {
            this.response.headers.set(Header.ContentType, v);
        }
    };
    #readBody = async () => {
        const contentType = this.request.headers.get(Header.ContentType);
        walk: {
            let data = {};
            if (contentType) {
                if (contentType.includes(MIME.ApplicationJSON)) {
                    data = JSON.parse(decoder.decode(await readAll(this.request.body)));
                }
                else if (contentType.includes(MIME.ApplicationForm)) {
                    for (const [k, v] of new URLSearchParams(decoder.decode(await readAll(this.request.body)))) {
                        data[k] = v;
                    }
                }
                else if (contentType.includes(MIME.MultipartForm)) {
                    const match = contentType.match(/boundary=([^\s]+)/);
                    const boundary = match ? match[1] : undefined;
                    if (boundary) {
                        const mr = new MultipartReader(this.request.body, boundary);
                        const form = await mr.readForm();
                        for (const [k, v] of form.entries()) {
                            data[k] = v;
                        }
                    }
                }
                else {
                    break walk;
                }
            }
            else {
                break walk;
            }
            return data;
        }
        return decoder.decode(await readAll(this.request.body));
    };
    string(v, code = Status.OK) {
        this.#writeContentType(MIME.TextPlainCharsetUTF8);
        this.response.status = code;
        this.response.body = encoder.encode(v);
    }
    json(v, code = Status.OK) {
        this.#writeContentType(MIME.ApplicationJSONCharsetUTF8);
        this.response.status = code;
        this.response.body = encoder.encode(typeof v === "object" ? JSON.stringify(v) : v);
    }
    html(v, code = Status.OK) {
        this.#writeContentType(MIME.TextHTMLCharsetUTF8);
        this.response.status = code;
        this.response.body = encoder.encode(v);
    }
    htmlBlob(b, code = Status.OK) {
        this.blob(b, MIME.TextHTMLCharsetUTF8, code);
    }
    async render(name, data = {}, code = Status.OK) {
        if (!this.app.renderer) {
            throw new Error();
        }
        const r = await this.app.renderer.render(name, data);
        this.htmlBlob(r, code);
    }
    blob(b, contentType, code = Status.OK) {
        if (contentType) {
            this.#writeContentType(contentType);
        }
        this.response.status = code;
        this.response.body = b;
    }
    async file(filepath) {
        filepath = join(cwd(), filepath);
        try {
            this.blob(await readFile(filepath), contentType(filepath));
        }
        catch {
            NotFoundHandler();
        }
    }
    setCookie(c) {
        setCookie(this.response, c);
    }
    redirect(url, code = Status.Found) {
        this.response.headers.set(Header.Location, url);
        this.response.status = code;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNoRSxPQUFPLEVBQ0wsVUFBVSxFQUNWLFNBQVMsR0FDVixNQUFNLDZDQUE2QyxDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNqRixPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXpELE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQztBQUV4QyxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7QUFFbEMsTUFBTSxPQUFPLE9BQU87SUFDbEIsR0FBRyxDQUFlO0lBQ2xCLE9BQU8sQ0FBaUI7SUFDeEIsR0FBRyxDQUFPO0lBRVYsUUFBUSxHQUFvQyxFQUFFLE9BQU8sRUFBRSxJQUFJLE9BQU8sRUFBRSxFQUFFLENBQUM7SUFDdkUsTUFBTSxHQUEyQixFQUFFLENBQUM7SUFDcEMsYUFBYSxDQUFNO0lBRW5CLE1BQU0sQ0FBaUM7SUFFdkMsS0FBSyxDQUErQjtJQUVwQyxJQUFJLE9BQU87UUFDVCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFD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